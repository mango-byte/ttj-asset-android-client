apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'

android {

    def globalConfiguration = rootProject.ext

    compileSdkVersion globalConfiguration.androidCompileSdkVersion
    buildToolsVersion globalConfiguration.androidBuildToolsVersion
    defaultConfig {
        applicationId globalConfiguration.androidApplicationId
        minSdkVersion globalConfiguration.androidMinSdkVersion
        targetSdkVersion globalConfiguration.androidTargetSdkVersion
        versionCode globalConfiguration.androidVersionCode
        versionName globalConfiguration.androidVersionName
        testInstrumentationRunner globalConfiguration.testInstrumentationRunner
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    signingConfigs {
        debug {
            storeFile file('../buildSystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

// Required for annotation processing plugins like Dagger
kapt {
    generateStubs = true
}

dependencies {

    // Compile
    def compileTimeDependencies = rootProject.ext.compileTimeDependencies
    kapt compileTimeDependencies.daggerCompiler
    kapt compileTimeDependencies.daggerAndroidProcessor
    provided compileTimeDependencies.javaxAnnotation
    provided compileTimeDependencies.javaxInject

    // Common
    def commonDependencies = rootProject.ext.commonDependencies
    for (dependency in commonDependencies) {
        implementation dependency.value
    }

    // Presentation
    def presentationDependencies = rootProject.ext.presentationDependencies
    for (dependency in presentationDependencies) {
        implementation dependency.value
    }

    // Development
    def developmentDependencies = rootProject.ext.developmentDependencies
    debugImplementation developmentDependencies.leakCanary
    releaseImplementation developmentDependencies.leakCanaryNoop
    testImplementation developmentDependencies.leakCanaryNoop

    // Test
    def testDependencies = rootProject.ext.testDependencies
    for (dependency in testDependencies) {
        testImplementation dependency.value
    }

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //Module Dependencies
    implementation project(':domain')
    implementation project(':data')
}
